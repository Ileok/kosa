package kosaShoppingMall.service.member;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;

import kosaShoppingMall.command.MemberCommand;
import kosaShoppingMall.domain.EmployeeDTO;
import kosaShoppingMall.mapper.MemberMapper;

@Component
@Service
public class MemberUpdateService {
	@Autowired
	MemberMapper memberMapper;
	@Autowired
	PasswordEncoder passwordEncoder;
	
	public String execute(MemberCommand memberCommand, Model model) {
		String path = "redirect:memberInfo?memNum="+memberCommand.getMemNum();
		if(!memberCommand.isMemPwEqualsMemPwCon()) {
			// EmployeeDTO dto = employeeMapper.selectOne(employeeCommand.getEmpId());
			model.addAttribute("errPw","비밀번호가 일치하지 않습니다.");
			// model.addAttribute("employeeCommand", dto);
			/*
			 Command를 인자값으로 받아온 경우 addAttribute를 사용하지 않아도 값 전달이 가능하다.
			 */
			path = "thymeleaf/member/memberModify";
		} else {
		String empPw = passwordEncoder.encode(memberCommand.getMemPw());
		System.out.println(empPw);
		MemberDTO dto = new MemberDTO();
		dto.setMemNum(memberCommand.getMemNum());
		dto.setMemId(memberCommand.getMemId());
		dto.setMemPw(memPw);
		dto.setMemName(memberCommand.getMemName());
		dto.setMemAddr(memberCommand.getMemAddr());
		dto.setMemRegist(memberCommand.getMemRegist());
		dto.setGender(memberCommand.getGender());
		dto.setMemPhone(memberCommand.getMemPhone());
		dto.setMemBirth(memberCommand.getMemBirth());
		dto.setMemEmail(memberCommand.getMemEmail());
		
		Integer i = employeeMapper.empUpdate(dto);
		System.out.println(i + "개 행이 수정되었습니다.");
		}
		return path;
	}
	
}
